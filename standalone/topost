#Looping over all the particles:
for i in range((no_of_particles-1)):
  # x_coordinates is an array that contains the x-coordinates of all the particles
  # The similar concept holds for y_coordinates, velocity_x and velocity_y
 
  x_particle_considered = af.data.constant(af.algorithm.sum(x_coordinates[i]), (no_of_particles-1-i))
  y_particle_considered = af.data.constant(af.algorithm.sum(y_coordinates[i]), (no_of_particles-1-i))  
  # In the above 2 lines, I'm using af.algorithm.sum to convert the value to a scalar.

  x_coordinates_others = x_coordinates[(i+1):no_of_particles]        
  y_coordinates_others = y_coordinates[(i+1):no_of_particles]

  velx = af.data.constant(af.algorithm.sum(velocity_x[i]), (no_of_particles-1-i))
  vely = af.data.constant(af.algorithm.sum(velocity_y[i]), (no_of_particles-1-i))
  
  velx_others = velocity_x[(i+1):no_of_particles]
  vely_others = velocity_y[(i+1):no_of_particles]
  
  # Determining the components of the vector joining particle i to all other particles    
  x_coordinates_others = x_coordinates_others-x_particle
  y_coordinates_others = y_coordinates_others-y_particle
  distance             = af.arith.sqrt(x_coordinates_others**2+y_coordinates_others**2)
  
  # Normalizing the components of the vector 
  x_coordinates_others          = x_coordinates_others/dist
  y_coordinates_others          = y_coordinates_others/dist
  
  # Obtaining a collision array where the value 1 denotes that a collision has happened
  test_collision = (distance<0.01) 

  # Getting the indices of the particles which encounter a collision
  indices        = af.algorithm.where(test_collision)
  
  if(np.sum(test_collision)!=0):
    p           = (velx*x_coordinates_others+vely*y_coordinates_others-velx_others*x_coordinates_others-vely_others*y_coordinates_others)*test_collision
    velx        = velx*test_collision-p*x_coordinates_others
    velx_others = velx_others+p*x_coordinates_others
    vely        = vely*test_collision-p*y_coordinates_others
    vely_others = vely_others+p*y_coordinates_others

    # In the model considered, only 2 body collisions can be considered.
    # For this reason, whenever a multibody collision occurs I've randomly chosen any 2 particles and scattered them
  
    index       = np.random.randint(0,af.Array.elements(indices))

    velocity_x[i+1+indices[index]] = velx_others[indices[index]]
    velocity_y[i+1+indices[index]] = vely_others[indices[index]]

    velocity_x[i] = velx[indices[index]]
    velocity_y[i] = vely[indices[index]]